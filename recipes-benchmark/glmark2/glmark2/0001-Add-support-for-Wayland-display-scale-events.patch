From 1183c2b8265e4dedc5f0b62a30a6a0eaed4d3d8b Mon Sep 17 00:00:00 2001
From: Daniel Stone <daniels@collabora.com>
Date: Fri, 13 Mar 2020 22:40:48 +0000
Subject: [PATCH 1/3] Add support for Wayland display-scale events

Does absolutely nothing at the moment, but will be used for fullscreen
support in a follow-up patch.
---
 src/native-state-wayland.cpp | 13 ++++++++-----
 src/native-state-wayland.h   |  1 +
 2 files changed, 9 insertions(+), 5 deletions(-)

diff --git a/src/native-state-wayland.cpp b/src/native-state-wayland.cpp
index cd2f1d0..b9fc79c 100644
--- a/src/native-state-wayland.cpp
+++ b/src/native-state-wayland.cpp
@@ -86,14 +86,14 @@ NativeStateWayland::~NativeStateWayland()
 void
 NativeStateWayland::registry_handle_global(void *data, struct wl_registry *registry,
                                            uint32_t id, const char *interface,
-                                           uint32_t /*version*/)
+                                           uint32_t version)
 {
     NativeStateWayland *that = static_cast<NativeStateWayland *>(data);
     if (strcmp(interface, "wl_compositor") == 0) {
         that->display_->compositor =
                 static_cast<struct wl_compositor *>(
                     wl_registry_bind(registry,
-                                     id, &wl_compositor_interface, 1));
+                                     id, &wl_compositor_interface, std::min(version, 4U)));
     } else if (strcmp(interface, "wl_shell") == 0) {
         that->display_->shell =
                 static_cast<struct wl_shell *>(
@@ -102,10 +102,11 @@ NativeStateWayland::registry_handle_global(void *data, struct wl_registry *regis
     } else if (strcmp(interface, "wl_output") == 0) {
         struct my_output *my_output = new struct my_output();
         memset(my_output, 0, sizeof(*my_output));
+        my_output->scale = 1;
         my_output->output =
                 static_cast<struct wl_output *>(
                     wl_registry_bind(registry,
-                                     id, &wl_output_interface, 2));
+                                     id, &wl_output_interface, std::min(version, 2U)));
         that->display_->outputs.push_back(my_output);
 
         wl_output_add_listener(my_output->output, &output_listener_, my_output);
@@ -150,9 +151,11 @@ NativeStateWayland::output_handle_done(void * /*data*/, struct wl_output * /*wl_
 }
 
 void
-NativeStateWayland::output_handle_scale(void * /*data*/, struct wl_output * /*wl_output*/,
-                                        int32_t /*factor*/)
+NativeStateWayland::output_handle_scale(void *data, struct wl_output * /*wl_output*/,
+                                        int32_t factor)
 {
+    struct my_output *my_output = static_cast<struct my_output *>(data);
+    my_output->scale = factor;
 }
 
 void
diff --git a/src/native-state-wayland.h b/src/native-state-wayland.h
index 37b96a6..cafa0ce 100644
--- a/src/native-state-wayland.h
+++ b/src/native-state-wayland.h
@@ -91,6 +91,7 @@ private:
         wl_output *output;
         int32_t width, height;
         int32_t refresh;
+        int32_t scale;
     };
 
     typedef std::vector<struct my_output *> OutputsVector;
-- 
2.25.1

